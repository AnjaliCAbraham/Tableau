<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20222.22.0812.0353                               -->
<workbook original-version='18.1' source-build='2022.2.1 (20222.22.0812.0353)' source-platform='win' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <SpecificWebTargetsForActions />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <repository-location id='Work_Map_29' path='/workbooks' revision='1.0' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
        <calculation class='tableau' formula='9000' />
        <aliases>
          <alias key='500' value='500' />
          <alias key='1000' value='1,000' />
          <alias key='3000' value='3,000' />
          <alias key='6000' value='6,000' />
          <alias key='9000' value='9,000' />
          <alias key='10000' value='All' />
        </aliases>
        <members>
          <member alias='9,000' value='9000' />
          <member alias='6,000' value='6000' />
          <member alias='3,000' value='3000' />
          <member alias='1,000' value='1000' />
          <member alias='500' value='500' />
          <member alias='All' value='10000' />
        </members>
      </column>
      <column alias='Country name' caption='Map View' datatype='string' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Country name&quot;'>
        <calculation class='tableau' formula='&quot;Country name&quot;' />
        <aliases>
          <alias key='&quot;Both&quot;' value='Both' />
          <alias key='&quot;Country name&quot;' value='Country name' />
          <alias key='&quot;Default&quot;' value='Default' />
          <alias key='&quot;Salary&quot;' value='Salary' />
        </aliases>
        <members>
          <member alias='Default' value='&quot;Default&quot;' />
          <member alias='Country name' value='&quot;Country name&quot;' />
          <member alias='Salary' value='&quot;Salary&quot;' />
          <member alias='Both' value='&quot;Both&quot;' />
        </members>
      </column>
      <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='170'>
        <calculation class='tableau' formula='170' />
        <range max='170' min='1' />
      </column>
      <column caption='Select range' datatype='integer' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='15'>
        <calculation class='tableau' formula='15' />
      </column>
      <column caption='Select Options' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;Child Mort&quot;'>
        <calculation class='tableau' formula='&quot;Child Mort&quot;' />
        <members>
          <member value='&quot;Exports&quot;' />
          <member value='&quot;Child Mort&quot;' />
          <member value='&quot;Health&quot;' />
          <member value='&quot;Import&quot;' />
          <member value='&quot;Income&quot;' />
          <member value='&quot;Gdpp&quot;' />
          <member value='&quot;Inflation&quot;' />
          <member value='&quot;Life Expec&quot;' />
          <member value='&quot;Total Fer&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='Corruption' inline='true' name='federated.0drvtjy1hq1dfe17q0te21oux79c' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='corruption' name='excel-direct.1qfhygx0mdjo1d18z30l21oslwqd'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Admin/Downloads/corruption.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1qfhygx0mdjo1d18z30l21oslwqd' name='Worksheet' table='[Worksheet$]' type='table'>
          <columns gridOrigin='A1:C111:no:A1:C111:0' header='yes' outcome='6'>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='integer' name='annual_income' ordinal='1' />
            <column datatype='integer' name='corruption_index' ordinal='2' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1qfhygx0mdjo1d18z30l21oslwqd' name='Worksheet' table='[Worksheet$]' type='table'>
          <columns gridOrigin='A1:C111:no:A1:C111:0' header='yes' outcome='6'>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='integer' name='annual_income' ordinal='1' />
            <column datatype='integer' name='corruption_index' ordinal='2' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:C111:no:A1:C111:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>annual_income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[annual_income]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>annual_income</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>corruption_index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[corruption_index]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>corruption_index</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='SalaryCal2' datatype='boolean' name='[Calculation_1302384731176534017]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1]*12&gt;=[annual_income]' />
      </column>
      <column caption='Index' datatype='integer' name='[Calculation_1377538550309584896]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='INDEX()'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='First 10' datatype='boolean' name='[Calculation_1377538550310002689]' role='measure' type='nominal'>
        <calculation class='tableau' formula='[Calculation_1377538550309584896]&lt;=[Parameters].[Parameter 4]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Last' datatype='integer' name='[Calculation_1377538550311116802]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='LAST()'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Last 10' datatype='boolean' name='[Calculation_1377538550311202819]' role='measure' type='nominal'>
        <calculation class='tableau' formula='[Calculation_1377538550311116802]&lt;=[Parameters].[Parameter 4]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='First &amp; Last 10' datatype='boolean' name='[Calculation_1377538550312067076]' role='measure' type='nominal'>
        <calculation class='tableau' formula='[Calculation_1377538550309584896]&lt;=[Parameters].[Parameter 4] or [Calculation_1377538550311116802]&lt;=[Parameters].[Parameter 4]-1'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='Worksheet' datatype='table' name='[__tableau_internal_object_id__].[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]' role='measure' type='quantitative' />
      <column caption='Annual Income' datatype='integer' name='[annual_income]' role='measure' type='quantitative' />
      <column caption='Corruption Index' datatype='integer' name='[corruption_index]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[country]' />
        </groupfilter>
      </group>
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Admin/Documents/My Tableau Repository/Datasources/Corruption.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='09/30/2022 05:31:34 AM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Corruption' increment-value='%null%' refresh-type='create' rows-inserted='110' timestamp-start='2022-09-30 05:31:33.690' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>0</ordinal>
              <family>Worksheet</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>110</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>annual_income</remote-name>
              <remote-type>20</remote-type>
              <local-name>[annual_income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>annual_income</remote-alias>
              <ordinal>1</ordinal>
              <family>Worksheet</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>106</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>corruption_index</remote-name>
              <remote-type>20</remote-type>
              <local-name>[corruption_index]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>corruption_index</remote-alias>
              <ordinal>2</ordinal>
              <family>Worksheet</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>50</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' rowDisplayCount='100' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Central Africa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Congo (Dem. Republic)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
          <calculation class='tableau' formula='9000' />
          <aliases>
            <alias key='500' value='500' />
            <alias key='1000' value='1,000' />
            <alias key='3000' value='3,000' />
            <alias key='6000' value='6,000' />
            <alias key='9000' value='9,000' />
            <alias key='10000' value='All' />
          </aliases>
        </column>
        <column caption='Select range' datatype='integer' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='15'>
          <calculation class='tableau' formula='15' />
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Worksheet' id='Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25'>
            <properties context=''>
              <relation connection='excel-direct.1qfhygx0mdjo1d18z30l21oslwqd' name='Worksheet' table='[Worksheet$]' type='table'>
                <columns gridOrigin='A1:C111:no:A1:C111:0' header='yes' outcome='6'>
                  <column datatype='string' name='country' ordinal='0' />
                  <column datatype='integer' name='annual_income' ordinal='1' />
                  <column datatype='integer' name='corruption_index' ordinal='2' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Cost_of_Living' inline='true' name='federated.0e5llo703nduuo1gz22r21wql9kl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='cost_of_living' name='excel-direct.0c81d7p187ovlf160yrn809u310o'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Admin/Downloads/cost_of_living.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0c81d7p187ovlf160yrn809u310o' name='Worksheet' table='[Worksheet$]' type='table'>
          <columns gridOrigin='A1:D108:no:A1:D108:0' header='yes' outcome='6'>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='real' name='cost_index' ordinal='1' />
            <column datatype='integer' name='monthly_income' ordinal='2' />
            <column datatype='real' name='purchasing_power_index' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.0c81d7p187ovlf160yrn809u310o' name='Worksheet' table='[Worksheet$]' type='table'>
          <columns gridOrigin='A1:D108:no:A1:D108:0' header='yes' outcome='6'>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='real' name='cost_index' ordinal='1' />
            <column datatype='integer' name='monthly_income' ordinal='2' />
            <column datatype='real' name='purchasing_power_index' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D108:no:A1:D108:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cost_index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[cost_index]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>cost_index</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>monthly_income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[monthly_income]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>monthly_income</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>purchasing_power_index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[purchasing_power_index]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>purchasing_power_index</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='SalaryCal' datatype='boolean' name='[Calculation_1302384731173437440]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1] &gt;= [monthly_income]' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='Cost' datatype='table' name='[__tableau_internal_object_id__].[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]' role='measure' type='quantitative' />
      <column caption='Cost Index' datatype='real' name='[cost_index]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Monthly Income' datatype='integer' name='[monthly_income]' role='measure' type='quantitative' />
      <column caption='Purchasing Power Index' datatype='real' name='[purchasing_power_index]' role='measure' type='quantitative' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[country]' />
        </groupfilter>
      </group>
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Admin/Documents/My Tableau Repository/Datasources/Cost_of_Living.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='09/30/2022 05:31:48 AM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Cost_of_Living' increment-value='%null%' refresh-type='create' rows-inserted='107' timestamp-start='2022-09-30 05:31:47.717' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>0</ordinal>
              <family>Worksheet</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>107</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>cost_index</remote-name>
              <remote-type>5</remote-type>
              <local-name>[cost_index]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>cost_index</remote-alias>
              <ordinal>1</ordinal>
              <family>Worksheet</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>100</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>monthly_income</remote-name>
              <remote-type>20</remote-type>
              <local-name>[monthly_income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>monthly_income</remote-alias>
              <ordinal>2</ordinal>
              <family>Worksheet</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>104</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>purchasing_power_index</remote-name>
              <remote-type>5</remote-type>
              <local-name>[purchasing_power_index]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>purchasing_power_index</remote-alias>
              <ordinal>3</ordinal>
              <family>Worksheet</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>96</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
          <calculation class='tableau' formula='9000' />
          <aliases>
            <alias key='500' value='500' />
            <alias key='1000' value='1,000' />
            <alias key='3000' value='3,000' />
            <alias key='6000' value='6,000' />
            <alias key='9000' value='9,000' />
            <alias key='10000' value='All' />
          </aliases>
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Cost' id='Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2'>
            <properties context=''>
              <relation connection='excel-direct.0c81d7p187ovlf160yrn809u310o' name='Worksheet' table='[Worksheet$]' type='table'>
                <columns gridOrigin='A1:D108:no:A1:D108:0' header='yes' outcome='6'>
                  <column datatype='string' name='country' ordinal='0' />
                  <column datatype='real' name='cost_index' ordinal='1' />
                  <column datatype='integer' name='monthly_income' ordinal='2' />
                  <column datatype='real' name='purchasing_power_index' ordinal='3' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Country-data' inline='true' name='federated.0t2t7u41dnhfqo1fs3viv0l37q26' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Country-data' name='textscan.05631ks1fpmca61fji56f1xqxmhb'>
            <connection class='textscan' directory='C:/Users/Admin/Downloads' filename='Country-data.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.05631ks1fpmca61fji56f1xqxmhb' name='Country-data.csv' table='[Country-data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='real' name='child_mort' ordinal='1' />
            <column datatype='real' name='exports' ordinal='2' />
            <column datatype='real' name='health' ordinal='3' />
            <column datatype='real' name='imports' ordinal='4' />
            <column datatype='integer' name='income' ordinal='5' />
            <column datatype='real' name='inflation' ordinal='6' />
            <column datatype='real' name='life_expec' ordinal='7' />
            <column datatype='real' name='total_fer' ordinal='8' />
            <column datatype='integer' name='gdpp' ordinal='9' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.05631ks1fpmca61fji56f1xqxmhb' name='Country-data.csv' table='[Country-data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='real' name='child_mort' ordinal='1' />
            <column datatype='real' name='exports' ordinal='2' />
            <column datatype='real' name='health' ordinal='3' />
            <column datatype='real' name='imports' ordinal='4' />
            <column datatype='integer' name='income' ordinal='5' />
            <column datatype='real' name='inflation' ordinal='6' />
            <column datatype='real' name='life_expec' ordinal='7' />
            <column datatype='real' name='total_fer' ordinal='8' />
            <column datatype='integer' name='gdpp' ordinal='9' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;₹&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>child_mort</remote-name>
            <remote-type>5</remote-type>
            <local-name>[child_mort]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>child_mort</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>exports</remote-name>
            <remote-type>5</remote-type>
            <local-name>[exports]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>exports</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>health</remote-name>
            <remote-type>5</remote-type>
            <local-name>[health]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>health</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>imports</remote-name>
            <remote-type>5</remote-type>
            <local-name>[imports]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>imports</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[income]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>income</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>inflation</remote-name>
            <remote-type>5</remote-type>
            <local-name>[inflation]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>inflation</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>life_expec</remote-name>
            <remote-type>5</remote-type>
            <local-name>[life_expec]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>life_expec</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_fer</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_fer]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>total_fer</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gdpp</remote-name>
            <remote-type>20</remote-type>
            <local-name>[gdpp]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>gdpp</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='ViewData' datatype='real' name='[Calculation_1377538550377811974]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 5]&#13;&#10;WHEN &apos;Exports&apos; then&#13;&#10;SUM([exports])&#13;&#10;WHEN &apos;Child Mort&apos; THEN&#13;&#10;SUM([child_mort])&#13;&#10;WHEN &apos;Gdpp&apos; THEN&#13;&#10;SUM([gdpp])&#13;&#10;WHEN &apos;Health&apos; THEN&#13;&#10;SUM([health])&#13;&#10;WHEN &apos;Import&apos; THEN&#13;&#10;SUM([imports])&#13;&#10;WHEN &apos;Income&apos; THEN&#13;&#10;SUM([income])&#13;&#10;END' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='Country-data.csv' datatype='table' name='[__tableau_internal_object_id__].[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]' role='measure' type='quantitative' />
      <column caption='Child Mort' datatype='real' name='[child_mort]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Exports' datatype='real' name='[exports]' role='measure' type='quantitative' />
      <column caption='Gdpp' datatype='integer' name='[gdpp]' role='measure' type='quantitative' />
      <column caption='Health' datatype='real' name='[health]' role='measure' type='quantitative' />
      <column caption='Imports' datatype='real' name='[imports]' role='measure' type='quantitative' />
      <column caption='Income' datatype='integer' name='[income]' role='measure' type='quantitative' />
      <column caption='Inflation' datatype='real' name='[inflation]' role='measure' type='quantitative' />
      <column caption='Life Expec' datatype='real' name='[life_expec]' role='measure' type='quantitative' />
      <column caption='Total Fer' datatype='real' name='[total_fer]' role='measure' type='quantitative' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Admin/Documents/My Tableau Repository/Datasources/Country-data.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='09/30/2022 05:31:05 AM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Country-data' increment-value='%null%' refresh-type='create' rows-inserted='167' timestamp-start='2022-09-30 05:31:04.567' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>0</ordinal>
              <family>Country-data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>167</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>child_mort</remote-name>
              <remote-type>5</remote-type>
              <local-name>[child_mort]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>child_mort</remote-alias>
              <ordinal>1</ordinal>
              <family>Country-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>139</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>exports</remote-name>
              <remote-type>5</remote-type>
              <local-name>[exports]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>exports</remote-alias>
              <ordinal>2</ordinal>
              <family>Country-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>147</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>health</remote-name>
              <remote-type>5</remote-type>
              <local-name>[health]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>health</remote-alias>
              <ordinal>3</ordinal>
              <family>Country-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>147</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>imports</remote-name>
              <remote-type>5</remote-type>
              <local-name>[imports]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>imports</remote-alias>
              <ordinal>4</ordinal>
              <family>Country-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>151</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>income</remote-name>
              <remote-type>20</remote-type>
              <local-name>[income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>income</remote-alias>
              <ordinal>5</ordinal>
              <family>Country-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>156</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>inflation</remote-name>
              <remote-type>5</remote-type>
              <local-name>[inflation]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>inflation</remote-alias>
              <ordinal>6</ordinal>
              <family>Country-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>156</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>life_expec</remote-name>
              <remote-type>5</remote-type>
              <local-name>[life_expec]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>life_expec</remote-alias>
              <ordinal>7</ordinal>
              <family>Country-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>127</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>total_fer</remote-name>
              <remote-type>5</remote-type>
              <local-name>[total_fer]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>total_fer</remote-alias>
              <ordinal>8</ordinal>
              <family>Country-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>138</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>gdpp</remote-name>
              <remote-type>20</remote-type>
              <local-name>[gdpp]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>gdpp</remote-alias>
              <ordinal>9</ordinal>
              <family>Country-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>157</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lao&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Macedonia, FYR&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Congo, Rep.&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Micronesia, Fed. Sts.&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Congo, Dem. Rep.&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Select Options' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;Child Mort&quot;'>
          <calculation class='tableau' formula='&quot;Child Mort&quot;' />
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Country-data.csv' id='Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B'>
            <properties context=''>
              <relation connection='textscan.05631ks1fpmca61fji56f1xqxmhb' name='Country-data.csv' table='[Country-data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
                  <column datatype='string' name='country' ordinal='0' />
                  <column datatype='real' name='child_mort' ordinal='1' />
                  <column datatype='real' name='exports' ordinal='2' />
                  <column datatype='real' name='health' ordinal='3' />
                  <column datatype='real' name='imports' ordinal='4' />
                  <column datatype='integer' name='income' ordinal='5' />
                  <column datatype='real' name='inflation' ordinal='6' />
                  <column datatype='real' name='life_expec' ordinal='7' />
                  <column datatype='real' name='total_fer' ordinal='8' />
                  <column datatype='integer' name='gdpp' ordinal='9' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1_521A010363574FE1B599271EC0FF709C]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Cost_Bar' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action2_35BE135ED96147AC8A8247F94F9C19FB]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Crpt_Bar' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action3_7FE6B9F1491B4A3BA0F23A1A0375DB42]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='CostOfLiving' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 4 (generated)' name='[Action4_BD885F6848C34D26B3D0A29639C4C349]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Corruption' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Hyperlink1' name='[Action5_C9561CE8225743C0B9FAE0F4611977BF]'>
      <activation type='on-select' />
      <source dashboard='Dashboard with Link' type='sheet' />
      <link caption='' expression='https://en.wikipedia.org/wiki/&lt;[country]&gt;'>
        <url-action-type>specific-zone</url-action-type>
        <url-action-target>15</url-action-target>
      </link>
    </action>
    <action caption='Hyperlink2' name='[Action8_841B5015B3B541B3B31E67AAD7CBDBC7]'>
      <activation type='on-select' />
      <source dashboard='Dashboard with Link' type='sheet' />
      <link caption='' expression='https://en.wikipedia.org/wiki/&lt;[country]&gt;'>
        <url-action-type>specific-zone</url-action-type>
        <url-action-target>15</url-action-target>
      </link>
    </action>
    <datasources>
      <datasource caption='Cost_of_Living' name='federated.0e5llo703nduuo1gz22r21wql9kl' />
    </datasources>
    <datasource-dependencies datasource='federated.0e5llo703nduuo1gz22r21wql9kl'>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
    </datasource-dependencies>
  </actions>
  <worksheets>
    <worksheet name='Corruption'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Country with Corruption index&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Corruption' name='federated.0drvtjy1hq1dfe17q0te21oux79c' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
              <calculation class='tableau' formula='9000' />
              <aliases>
                <alias key='500' value='500' />
                <alias key='1000' value='1,000' />
                <alias key='3000' value='3,000' />
                <alias key='6000' value='6,000' />
                <alias key='9000' value='9,000' />
                <alias key='10000' value='All' />
              </aliases>
            </column>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='170'>
              <calculation class='tableau' formula='170' />
              <range max='170' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0drvtjy1hq1dfe17q0te21oux79c'>
            <column caption='SalaryCal2' datatype='boolean' name='[Calculation_1302384731176534017]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]*12&gt;=[annual_income]' />
            </column>
            <column caption='Annual Income' datatype='integer' name='[annual_income]' role='measure' type='quantitative' />
            <column caption='Corruption Index' datatype='integer' name='[corruption_index]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Calculation_1302384731176534017]' derivation='None' name='[none:Calculation_1302384731176534017:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[corruption_index]' derivation='Sum' name='[sum:corruption_index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action1_521A010363574FE1B599271EC0FF709C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]'>
            <groupfilter function='member' level='[none:Calculation_1302384731176534017:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([annual_income])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[Action (Country)]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:corruption_index:qk]' value='' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='false' />
            <format attr='break-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='false' />
            <format attr='omit-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Latitude (generated)]' value='false' />
            <format attr='break-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Latitude (generated)]' value='false' />
            <format attr='show-null-value-warning' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Latitude (generated)]' value='false' />
            <format attr='omit-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Longitude (generated)]' value='false' />
            <format attr='break-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Longitude (generated)]' value='false' />
            <format attr='show-null-value-warning' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Longitude (generated)]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' />
              <text column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:corruption_index:qk]' />
              <geometry column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='6' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0drvtjy1hq1dfe17q0te21oux79c].[Latitude (generated)]</rows>
        <cols>[federated.0drvtjy1hq1dfe17q0te21oux79c].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{2988AC81-8A52-4832-8457-6F7DFFC7CF1E}' />
    </worksheet>
    <worksheet name='CostOfLiving'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Salary with purchasing index&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_Living' name='federated.0e5llo703nduuo1gz22r21wql9kl' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
              <calculation class='tableau' formula='9000' />
              <aliases>
                <alias key='500' value='500' />
                <alias key='1000' value='1,000' />
                <alias key='3000' value='3,000' />
                <alias key='6000' value='6,000' />
                <alias key='9000' value='9,000' />
                <alias key='10000' value='All' />
              </aliases>
            </column>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='170'>
              <calculation class='tableau' formula='170' />
              <range max='170' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0e5llo703nduuo1gz22r21wql9kl'>
            <column caption='SalaryCal' datatype='boolean' name='[Calculation_1302384731173437440]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] &gt;= [monthly_income]' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Monthly Income' datatype='integer' name='[monthly_income]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1302384731173437440]' derivation='None' name='[none:Calculation_1302384731173437440:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[monthly_income]' derivation='Sum' name='[pcto:sum:monthly_income:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column caption='Purchasing Power Index' datatype='real' name='[purchasing_power_index]' role='measure' type='quantitative' />
            <column-instance column='[purchasing_power_index]' derivation='Sum' name='[sum:purchasing_power_index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action1_521A010363574FE1B599271EC0FF709C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]'>
            <groupfilter function='member' level='[none:Calculation_1302384731173437440:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([monthly_income])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:country:nk]' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:country:nk]' member='&quot;Bermuda&quot;' />
                    <groupfilter function='member' level='[none:country:nk]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]</column>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[Action (Country)]</column>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:purchasing_power_index:qk]' />
              <text column='[federated.0e5llo703nduuo1gz22r21wql9kl].[pcto:sum:monthly_income:qk:1]' />
              <lod column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' />
              <geometry column='[federated.0e5llo703nduuo1gz22r21wql9kl].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='6' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0e5llo703nduuo1gz22r21wql9kl].[Latitude (generated)]</rows>
        <cols>[federated.0e5llo703nduuo1gz22r21wql9kl].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{CFBA5A23-8266-4942-8273-FD956965A166}' />
    </worksheet>
    <worksheet name='Cost_Bar'>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_Living' name='federated.0e5llo703nduuo1gz22r21wql9kl' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
              <calculation class='tableau' formula='9000' />
              <aliases>
                <alias key='500' value='500' />
                <alias key='1000' value='1,000' />
                <alias key='3000' value='3,000' />
                <alias key='6000' value='6,000' />
                <alias key='9000' value='9,000' />
                <alias key='10000' value='All' />
              </aliases>
            </column>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='170'>
              <calculation class='tableau' formula='170' />
              <range max='170' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0e5llo703nduuo1gz22r21wql9kl'>
            <column caption='SalaryCal' datatype='boolean' name='[Calculation_1302384731173437440]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] &gt;= [monthly_income]' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Monthly Income' datatype='integer' name='[monthly_income]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1302384731173437440]' derivation='None' name='[none:Calculation_1302384731173437440:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column caption='Purchasing Power Index' datatype='real' name='[purchasing_power_index]' role='measure' type='quantitative' />
            <column-instance column='[monthly_income]' derivation='Sum' name='[sum:monthly_income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[purchasing_power_index]' derivation='Sum' name='[sum:purchasing_power_index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action2_35BE135ED96147AC8A8247F94F9C19FB]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]'>
            <groupfilter function='member' level='[none:Calculation_1302384731173437440:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([monthly_income])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:country:nk]' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:country:nk]' member='&quot;Bermuda&quot;' />
                    <groupfilter function='member' level='[none:country:nk]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]</column>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[Action (Country)]</column>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' value='114' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' value='7' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' />
              <tooltip column='[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:monthly_income:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='548' />
                <format attr='maxheight' value='548' />
                <format attr='minwidth' value='2040' />
                <format attr='maxwidth' value='2040' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:purchasing_power_index:qk]</rows>
        <cols>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</cols>
      </table>
      <simple-id uuid='{EE84FF5A-FC3D-42A7-8F50-1218E3D13247}' />
    </worksheet>
    <worksheet name='Countries with Top N things'>
      <table>
        <view>
          <datasources>
            <datasource caption='Country-data' name='federated.0t2t7u41dnhfqo1fs3viv0l37q26' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='170'>
              <calculation class='tableau' formula='170' />
              <range max='170' min='1' />
            </column>
            <column caption='Select Options' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;Child Mort&quot;'>
              <calculation class='tableau' formula='&quot;Child Mort&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0t2t7u41dnhfqo1fs3viv0l37q26'>
            <column caption='ViewData' datatype='real' name='[Calculation_1377538550377811974]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 5]&#13;&#10;WHEN &apos;Exports&apos; then&#13;&#10;SUM([exports])&#13;&#10;WHEN &apos;Child Mort&apos; THEN&#13;&#10;SUM([child_mort])&#13;&#10;WHEN &apos;Gdpp&apos; THEN&#13;&#10;SUM([gdpp])&#13;&#10;WHEN &apos;Health&apos; THEN&#13;&#10;SUM([health])&#13;&#10;WHEN &apos;Import&apos; THEN&#13;&#10;SUM([imports])&#13;&#10;WHEN &apos;Income&apos; THEN&#13;&#10;SUM([income])&#13;&#10;END' />
            </column>
            <column caption='Child Mort' datatype='real' name='[child_mort]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Exports' datatype='real' name='[exports]' role='measure' type='quantitative' />
            <column caption='Gdpp' datatype='integer' name='[gdpp]' role='measure' type='quantitative' />
            <column caption='Health' datatype='real' name='[health]' role='measure' type='quantitative' />
            <column caption='Imports' datatype='real' name='[imports]' role='measure' type='quantitative' />
            <column caption='Income' datatype='integer' name='[income]' role='measure' type='quantitative' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1377538550377811974]' derivation='User' name='[usr:Calculation_1377538550377811974:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='[Calculation_1377538550377811974]' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]' />
              <lod column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[usr:Calculation_1377538550377811974:qk]' />
              <text column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[usr:Calculation_1377538550377811974:qk]' />
              <geometry column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='7' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[Latitude (generated)]</rows>
        <cols>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{83D98175-CE59-41E0-9A97-D38673E6D743}' />
    </worksheet>
    <worksheet name='Crpt_Bar'>
      <layout-options>
        <title>
          <formatted-text />
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Corruption' name='federated.0drvtjy1hq1dfe17q0te21oux79c' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
              <calculation class='tableau' formula='9000' />
              <aliases>
                <alias key='500' value='500' />
                <alias key='1000' value='1,000' />
                <alias key='3000' value='3,000' />
                <alias key='6000' value='6,000' />
                <alias key='9000' value='9,000' />
                <alias key='10000' value='All' />
              </aliases>
            </column>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='170'>
              <calculation class='tableau' formula='170' />
              <range max='170' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0drvtjy1hq1dfe17q0te21oux79c'>
            <column caption='SalaryCal2' datatype='boolean' name='[Calculation_1302384731176534017]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]*12&gt;=[annual_income]' />
            </column>
            <column caption='Annual Income' datatype='integer' name='[annual_income]' role='measure' type='quantitative' />
            <column caption='Corruption Index' datatype='integer' name='[corruption_index]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Calculation_1302384731176534017]' derivation='None' name='[none:Calculation_1302384731176534017:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[annual_income]' derivation='Sum' name='[sum:annual_income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[corruption_index]' derivation='Sum' name='[sum:corruption_index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action1_521A010363574FE1B599271EC0FF709C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]'>
            <groupfilter function='member' level='[none:Calculation_1302384731176534017:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([annual_income])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[Action (Country)]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='7' />
            <format attr='display' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' />
              <text column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='7' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:annual_income:qk]</rows>
        <cols>[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:corruption_index:qk]</cols>
      </table>
      <simple-id uuid='{EA566D77-01B1-45DA-8130-D6C3674E5E67}' />
    </worksheet>
    <worksheet name='Filtering and Sorting'>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_Living' name='federated.0e5llo703nduuo1gz22r21wql9kl' />
            <datasource name='Parameters' />
            <datasource caption='Corruption' name='federated.0drvtjy1hq1dfe17q0te21oux79c' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Select range' datatype='integer' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='15'>
              <calculation class='tableau' formula='15' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0drvtjy1hq1dfe17q0te21oux79c'>
            <column caption='Index' datatype='integer' name='[Calculation_1377538550309584896]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='INDEX()'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='First 10' datatype='boolean' name='[Calculation_1377538550310002689]' role='measure' type='nominal'>
              <calculation class='tableau' formula='[Calculation_1377538550309584896]&lt;=[Parameters].[Parameter 4]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Last' datatype='integer' name='[Calculation_1377538550311116802]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='LAST()'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='First &amp; Last 10' datatype='boolean' name='[Calculation_1377538550312067076]' role='measure' type='nominal'>
              <calculation class='tableau' formula='[Calculation_1377538550309584896]&lt;=[Parameters].[Parameter 4] or [Calculation_1377538550311116802]&lt;=[Parameters].[Parameter 4]-1'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Annual Income' datatype='integer' name='[annual_income]' role='measure' type='quantitative' />
            <column-instance column='[annual_income]' derivation='Sum' name='[sum:annual_income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1377538550309584896]' derivation='User' name='[usr:Calculation_1377538550309584896:ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_1377538550310002689]' derivation='User' name='[usr:Calculation_1377538550310002689:nk:1]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Calculation_1377538550309584896]' ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_1377538550311116802]' derivation='User' name='[usr:Calculation_1377538550311116802:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_1377538550312067076]' derivation='User' name='[usr:Calculation_1377538550312067076:nk:1]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Calculation_1377538550309584896]' ordering-type='Columns' />
              <table-calc field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Calculation_1377538550311116802]' ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0e5llo703nduuo1gz22r21wql9kl'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Monthly Income' datatype='integer' name='[monthly_income]' role='measure' type='quantitative' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[monthly_income]' derivation='Sum' name='[sum:monthly_income:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550312067076:nk:1]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[usr:Calculation_1377538550312067076:nk:1]' />
              <groupfilter function='member' level='[usr:Calculation_1377538550312067076:nk:1]' member='false' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:monthly_income:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:annual_income:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:monthly_income:qk]&quot;</bucket>
              <bucket>&quot;[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:annual_income:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:monthly_income:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550312067076:nk:1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]' value='163' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550311116802:ok:1]' value='true' />
            <format attr='display' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550309584896:ok]' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550310002689:nk:1]' />
              <text column='[federated.0e5llo703nduuo1gz22r21wql9kl].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550309584896:ok] / ([federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550311116802:ok:1] / [federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]))</rows>
        <cols>[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{F1332797-EA61-4C34-BFA3-D6027723798E}' />
    </worksheet>
    <worksheet name='Sheet 7'>
      <table>
        <view>
          <datasources>
            <datasource caption='Country-data' name='federated.0t2t7u41dnhfqo1fs3viv0l37q26' />
          </datasources>
          <datasource-dependencies datasource='federated.0t2t7u41dnhfqo1fs3viv0l37q26'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Income' datatype='integer' name='[income]' role='measure' type='quantitative' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[income]' derivation='Sum' name='[sum:income:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='72' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]' value='228' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[sum:income:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{B65031D5-715A-4719-8227-2286ED9E41EA}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#75a1c7' fontname='Tableau Semibold'>Cost of Living</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='1000' maxwidth='1800' minheight='1000' minwidth='1800' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
          <calculation class='tableau' formula='9000' />
          <aliases>
            <alias key='500' value='500' />
            <alias key='1000' value='1,000' />
            <alias key='3000' value='3,000' />
            <alias key='6000' value='6,000' />
            <alias key='9000' value='9,000' />
            <alias key='10000' value='All' />
          </aliases>
          <members>
            <member alias='9,000' value='9000' />
            <member alias='6,000' value='6000' />
            <member alias='3,000' value='3000' />
            <member alias='1,000' value='1000' />
            <member alias='500' value='500' />
            <member alias='All' value='10000' />
          </members>
        </column>
        <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='170'>
          <calculation class='tableau' formula='170' />
          <range max='170' min='1' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98400' id='16' param='horz' type-v2='layout-flow' w='99112' x='444' y='800'>
            <zone h='98400' id='5' param='vert' type-v2='layout-flow' w='99112' x='444' y='800'>
              <zone h='4900' id='7' type-v2='title' w='99112' x='444' y='800'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='51750' id='8' name='CostOfLiving' w='45200' x='500' y='10125'>
          <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
        </zone>
        <zone h='51750' id='12' name='Corruption' w='51600' x='46500' y='10000'>
          <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
        </zone>
        <zone h='7000' id='11' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='16000' x='82700' y='1250'>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='4' />
          </zone-style>
        </zone>
        <zone h='37375' id='13' name='Cost_Bar' show-title='false' w='45100' x='400' y='62000'>
          <layout-cache minheight='330' type-h='scalable' type-w='cell' />
        </zone>
        <zone h='37300' id='14' name='Crpt_Bar' show-title='false' w='51333' x='46611' y='62100'>
          <layout-cache cell-count-w='106' minheight='330' non-cell-size-w='68' type-h='scalable' type-w='cell' />
        </zone>
        <zone h='7100' id='41' mode='slider' param='[Parameters].[Parameter 3]' type-v2='paramctrl' w='8889' x='73444' y='1700' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run bold='true' fontcolor='#75a1c7' fontname='Tableau Semibold'>Cost of Living</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1400' minheight='1400' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='53' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98400' id='52' param='vert' type-v2='layout-flow' w='99112' x='444' y='800'>
                <zone h='4900' id='7' type-v2='title' w='99112' x='444' y='800'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7000' id='11' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='16000' x='82700' y='1250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7100' id='41' mode='slider' param='[Parameters].[Parameter 3]' type-v2='paramctrl' w='8889' x='73444' y='1700'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='51750' id='12' is-fixed='true' name='Corruption' w='51600' x='46500' y='10000'>
                  <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='51750' id='8' is-fixed='true' name='CostOfLiving' w='45200' x='500' y='10125'>
                  <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='37375' id='13' is-fixed='true' name='Cost_Bar' show-title='false' w='45100' x='400' y='62000'>
                  <layout-cache minheight='330' type-h='scalable' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='37300' id='14' is-fixed='true' name='Crpt_Bar' show-title='false' w='51333' x='46611' y='62100'>
                  <layout-cache cell-count-w='106' minheight='330' non-cell-size-w='68' type-h='scalable' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{F167DD9D-CDB6-4AD2-B3B5-04563D805EB0}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard with Link'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#75a1c7' fontname='Tableau Semibold'>Cost of Living</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='1000' maxwidth='1800' minheight='1000' minwidth='1800' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
          <calculation class='tableau' formula='9000' />
          <aliases>
            <alias key='500' value='500' />
            <alias key='1000' value='1,000' />
            <alias key='3000' value='3,000' />
            <alias key='6000' value='6,000' />
            <alias key='9000' value='9,000' />
            <alias key='10000' value='All' />
          </aliases>
          <members>
            <member alias='9,000' value='9000' />
            <member alias='6,000' value='6000' />
            <member alias='3,000' value='3000' />
            <member alias='1,000' value='1000' />
            <member alias='500' value='500' />
            <member alias='All' value='10000' />
          </members>
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98400' id='14' param='horz' type-v2='layout-flow' w='99112' x='444' y='800'>
            <zone h='98400' id='5' param='vert' type-v2='layout-flow' w='99112' x='444' y='800'>
              <zone h='4900' id='7' type-v2='title' w='99112' x='444' y='800'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='39000' id='8' name='CostOfLiving' w='47900' x='500' y='8375' />
        <zone h='7000' id='11' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='16000' x='83100' y='875'>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='4' />
          </zone-style>
        </zone>
        <zone h='38875' id='12' name='Corruption' w='47600' x='51400' y='8250'>
          <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
        </zone>
        <zone forceUpdate='' h='51000' id='15' param='https://en.wikipedia.org/wiki/Russia' type-v2='web' w='98900' x='300' y='48000' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run bold='true' fontcolor='#75a1c7' fontname='Tableau Semibold'>Cost of Living</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1000' minheight='1000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='36' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98400' id='35' param='vert' type-v2='layout-flow' w='99112' x='444' y='800'>
                <zone h='4900' id='7' type-v2='title' w='99112' x='444' y='800'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7000' id='11' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='16000' x='83100' y='875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='38875' id='12' is-fixed='true' name='Corruption' w='47600' x='51400' y='8250'>
                  <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='39000' id='8' is-fixed='true' name='CostOfLiving' w='47900' x='500' y='8375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' forceUpdate='' h='51000' id='15' is-fixed='true' param='https://en.wikipedia.org/wiki/Russia' type-v2='web' w='98900' x='300' y='48000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{94D2D7B1-0626-477A-BB54-7BB47F7D2941}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='89'>
    <window class='worksheet' name='CostOfLiving'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:monthly_income:qk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[pcto:sum:monthly_income:qk:2]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{DDAA6DB2-B95E-4601-ABAD-7BF22AA9BF00}' />
    </window>
    <window class='worksheet' name='Corruption'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_569705366858178561:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C99553A4-920D-4AF1-A180-A79865D7BB01}' />
    </window>
    <window class='worksheet' name='Cost_Bar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:monthly_income:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{307053C4-4ED1-4075-9C47-9B543382E7A3}' />
    </window>
    <window class='worksheet' name='Crpt_Bar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550312067076:nk:3]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{62D92947-2BA0-43C9-89C5-C281F0D50392}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Corruption'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='CostOfLiving'>
          <zoom type='entire-view' />
          <default-map-tool-selection tool='4' />
        </viewpoint>
        <viewpoint name='Cost_Bar'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Crpt_Bar'>
          <zoom type='entire-view' />
          <highlight field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{5EDFFD5E-1EEB-4554-9323-D53E372CE20C}' />
    </window>
    <window class='dashboard' name='Dashboard with Link'>
      <viewpoints>
        <viewpoint name='Corruption'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='CostOfLiving'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{3ED0A8FC-E79A-4A0D-BFD2-78B99EEF3667}' />
    </window>
    <window class='worksheet' name='Filtering and Sorting'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
            <card pane-specification-id='0' param='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550310002689:nk:1]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550309584896:ok]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550310002689:nk:1]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550311116802:ok:1]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550311202819:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550312067076:nk:1]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C9870FB3-256A-4BA0-8B5B-A87469D3BF4E}' />
    </window>
    <window class='worksheet' maximized='true' name='Countries with Top N things'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 5]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</field>
            <field>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9ADC0F89-38E6-474D-9761-5DB22DDB2077}' />
    </window>
    <window class='worksheet' name='Sheet 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]</field>
            <field>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[sum:child_mort:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{187CD704-EA37-4497-87FC-F243F1D10C1D}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Corruption' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CostOfLiving' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Cost_Bar' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Countries with Top N things' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Crpt_Bar' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      XxD+P3sKcaXP7DbpAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Dashboard with Link' width='192'>
      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
      TUmSVmSsyM4DwINjngq0RKi7MHkkxsbGuIFJnRRo1QIaV03yJg0ODq7ZqTCWZWFycpJHbpPJ
      JF8VyeUpNptyqzJkJJNxTOd9KYrSMFlrtVrDxCcoyiweiC2qVfReOlOsq6trRVRJcWEqFoue
      AKwEuq6jUqnwhw3c0p9JZxYnBUVNyQCkZLzVHn/K96e6XPp88f4cx+GBJ6qoo6IXKj5pFkEW
      qdVqDYsBQQXxzSY2ed5isRhSqdSKjw0/EHFFr9qhzM7OQlVVfsAcbemUmtvdXT+2iSaOZVk8
      89I0TX46YyqValiJbzeU9kElgolEon4e2M0mV6R+EGJ1FR0yR9B3Fg+tFjvDaZrGDV6xh2e5
      XObeHurgTP76aDSKUCh0WxYGOp/M2wFWgFKpxA03Sr7SdZ0nh1EKAR0oTXnqdK6A3+/nQaPu
      7u6GQ+DuRGzbbjjfjGqCqR7YfY6wCI0T7QbRaJQfFkjCRqqk3+9HV1fXbc0k9naAZUKpFLRq
      u40sUoWofR95PSjgRJ4RAFwQ7tRsUsLn86FWq/HCIkoHpy4Q80HFN+SJIvWQskEpbSIcDi+Y
      6LYSeAKwTKjrgbjSi+fkUr66YRhIJpP8fa10ZsqNWY2Hv1TIkKRWKGQDLGQLkHeM3MLU/sSN
      u+nV7cQTgAWYr5iH3H7UFZkOiyMDkvzOdDB2O5AA6LoOv99/R5wf7IZ0dIoit1tIRKoO2QZi
      SgXtJNQ1erXwBGAB2tE/yWNBAS7yhYudyRYD+d5N00S1WuWeIlIX1rq6jg7PmJmZ4UEuapk4
      H5RXRRFyWkAoOBiPxxt2ydXAE4Bl4DgOSqUSzywkRP1/OZAtQO5H4Fa531rvColEouE0l3Z2
      AooT0KSn+AKlRvT29q662nfPt0W5nZDO7175SBdeqBKqFa2KOIC6UORyuTn57asNeaw0TeMe
      nIXuh7JKgbk5PtQDdLXxBGAZkJtO1O+bnXi+WMQSzVZQaeBaEgqFsH79em7o065HhfJufD7f
      nMPFm+UXrSaeACwTsfESsLoPcq1tAeBW+xTateg8r2Zp0OQtI7evmPrgDqytFjwQRgaKh0cn
      wQXAw6MTUQBgcmIEinL3tfjz8FguClA/Z7e3b/1a34uHx6qz9laUh8ca4gmAR0fjCYBHR+MJ
      gEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fj
      CYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH
      4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBH
      R+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmA
      R0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJ
      gEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fj
      CYBHR+MJgEdH8/8B8f2DDeZuEKgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Filtering and Sorting' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 7' width='192'>
      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
      H4/PAqWQAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
