<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20222.22.0812.0353                               -->
<workbook original-version='18.1' source-build='2022.2.1 (20222.22.0812.0353)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <SpecificWebTargetsForActions />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
        <calculation class='tableau' formula='9000' />
        <aliases>
          <alias key='500' value='500' />
          <alias key='1000' value='1,000' />
          <alias key='3000' value='3,000' />
          <alias key='6000' value='6,000' />
          <alias key='9000' value='9,000' />
          <alias key='10000' value='All' />
        </aliases>
        <members>
          <member alias='9,000' value='9000' />
          <member alias='6,000' value='6000' />
          <member alias='3,000' value='3000' />
          <member alias='1,000' value='1000' />
          <member alias='500' value='500' />
          <member alias='All' value='10000' />
        </members>
      </column>
      <column alias='Country name' caption='Map View' datatype='string' datatype-customized='true' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Country name&quot;'>
        <calculation class='tableau' formula='&quot;Country name&quot;' />
        <aliases>
          <alias key='&quot;Both&quot;' value='Both' />
          <alias key='&quot;Country name&quot;' value='Country name' />
          <alias key='&quot;Default&quot;' value='Default' />
          <alias key='&quot;Salary&quot;' value='Salary' />
        </aliases>
        <members>
          <member alias='Default' value='&quot;Default&quot;' />
          <member alias='Country name' value='&quot;Country name&quot;' />
          <member alias='Salary' value='&quot;Salary&quot;' />
          <member alias='Both' value='&quot;Both&quot;' />
        </members>
      </column>
      <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='3'>
        <calculation class='tableau' formula='3' />
        <range max='110' min='1' />
      </column>
      <column caption='Select range' datatype='integer' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='15'>
        <calculation class='tableau' formula='15' />
      </column>
      <column caption='Select Options' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;Child Mort&quot;'>
        <calculation class='tableau' formula='&quot;Child Mort&quot;' />
        <members>
          <member value='&quot;Exports&quot;' />
          <member value='&quot;Child Mort&quot;' />
          <member value='&quot;Health&quot;' />
          <member value='&quot;Import&quot;' />
          <member value='&quot;Income&quot;' />
          <member value='&quot;Gdpp&quot;' />
          <member value='&quot;Inflation&quot;' />
          <member value='&quot;Life Expec&quot;' />
          <member value='&quot;Total Fer&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='Cost_of_Living' inline='true' name='federated.0e5llo703nduuo1gz22r21wql9kl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='cost_of_living' name='excel-direct.0c81d7p187ovlf160yrn809u310o'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Admin/Downloads/cost_of_living.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0c81d7p187ovlf160yrn809u310o' name='Worksheet' table='[Worksheet$]' type='table'>
          <columns gridOrigin='A1:D108:no:A1:D108:0' header='yes' outcome='6'>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='real' name='cost_index' ordinal='1' />
            <column datatype='integer' name='monthly_income' ordinal='2' />
            <column datatype='real' name='purchasing_power_index' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.0c81d7p187ovlf160yrn809u310o' name='Worksheet' table='[Worksheet$]' type='table'>
          <columns gridOrigin='A1:D108:no:A1:D108:0' header='yes' outcome='6'>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='real' name='cost_index' ordinal='1' />
            <column datatype='integer' name='monthly_income' ordinal='2' />
            <column datatype='real' name='purchasing_power_index' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D108:no:A1:D108:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cost_index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[cost_index]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>cost_index</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>monthly_income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[monthly_income]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>monthly_income</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>purchasing_power_index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[purchasing_power_index]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>purchasing_power_index</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='SalaryCal' datatype='boolean' name='[Calculation_1302384731173437440]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1] &gt;= [monthly_income]' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='Cost' datatype='table' name='[__tableau_internal_object_id__].[Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2]' role='measure' type='quantitative' />
      <column caption='Cost Index' datatype='real' name='[cost_index]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Monthly Income' datatype='integer' name='[monthly_income]' role='measure' type='quantitative' />
      <column caption='Purchasing Power Index' datatype='real' name='[purchasing_power_index]' role='measure' type='quantitative' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[country]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
          <calculation class='tableau' formula='9000' />
          <aliases>
            <alias key='500' value='500' />
            <alias key='1000' value='1,000' />
            <alias key='3000' value='3,000' />
            <alias key='6000' value='6,000' />
            <alias key='9000' value='9,000' />
            <alias key='10000' value='All' />
          </aliases>
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Cost' id='Worksheet_4D82CCAE73284A768BBFF1481DB8CBD2'>
            <properties context=''>
              <relation connection='excel-direct.0c81d7p187ovlf160yrn809u310o' name='Worksheet' table='[Worksheet$]' type='table'>
                <columns gridOrigin='A1:D108:no:A1:D108:0' header='yes' outcome='6'>
                  <column datatype='string' name='country' ordinal='0' />
                  <column datatype='real' name='cost_index' ordinal='1' />
                  <column datatype='integer' name='monthly_income' ordinal='2' />
                  <column datatype='real' name='purchasing_power_index' ordinal='3' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Corruption' inline='true' name='federated.0drvtjy1hq1dfe17q0te21oux79c' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='corruption' name='excel-direct.1qfhygx0mdjo1d18z30l21oslwqd'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Admin/Downloads/corruption.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1qfhygx0mdjo1d18z30l21oslwqd' name='Worksheet' table='[Worksheet$]' type='table'>
          <columns gridOrigin='A1:C111:no:A1:C111:0' header='yes' outcome='6'>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='integer' name='annual_income' ordinal='1' />
            <column datatype='integer' name='corruption_index' ordinal='2' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1qfhygx0mdjo1d18z30l21oslwqd' name='Worksheet' table='[Worksheet$]' type='table'>
          <columns gridOrigin='A1:C111:no:A1:C111:0' header='yes' outcome='6'>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='integer' name='annual_income' ordinal='1' />
            <column datatype='integer' name='corruption_index' ordinal='2' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:C111:no:A1:C111:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>annual_income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[annual_income]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>annual_income</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>corruption_index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[corruption_index]</local-name>
            <parent-name>[Worksheet]</parent-name>
            <remote-alias>corruption_index</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='SalaryCal2' datatype='boolean' name='[Calculation_1302384731176534017]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1]*12&gt;=[annual_income]' />
      </column>
      <column caption='Index' datatype='integer' name='[Calculation_1377538550309584896]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='INDEX()'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='First 10' datatype='boolean' name='[Calculation_1377538550310002689]' role='measure' type='nominal'>
        <calculation class='tableau' formula='[Calculation_1377538550309584896]&lt;=[Parameters].[Parameter 4]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Last' datatype='integer' name='[Calculation_1377538550311116802]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='LAST()'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Last 10' datatype='boolean' name='[Calculation_1377538550311202819]' role='measure' type='nominal'>
        <calculation class='tableau' formula='[Calculation_1377538550311116802]&lt;=[Parameters].[Parameter 4]'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='First &amp; Last 10' datatype='boolean' name='[Calculation_1377538550312067076]' role='measure' type='nominal'>
        <calculation class='tableau' formula='[Calculation_1377538550309584896]&lt;=[Parameters].[Parameter 4] or [Calculation_1377538550311116802]&lt;=[Parameters].[Parameter 4]-1'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='Worksheet' datatype='table' name='[__tableau_internal_object_id__].[Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25]' role='measure' type='quantitative' />
      <column caption='Annual Income' datatype='integer' name='[annual_income]' role='measure' type='quantitative' />
      <column caption='Corruption Index' datatype='integer' name='[corruption_index]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[country]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' rowDisplayCount='100' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Central Africa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Congo (Dem. Republic)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
          <calculation class='tableau' formula='9000' />
          <aliases>
            <alias key='500' value='500' />
            <alias key='1000' value='1,000' />
            <alias key='3000' value='3,000' />
            <alias key='6000' value='6,000' />
            <alias key='9000' value='9,000' />
            <alias key='10000' value='All' />
          </aliases>
        </column>
        <column caption='Select range' datatype='integer' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='15'>
          <calculation class='tableau' formula='15' />
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Worksheet' id='Worksheet_3E8DA381B28A4C4C9214C5C6203B0D25'>
            <properties context=''>
              <relation connection='excel-direct.1qfhygx0mdjo1d18z30l21oslwqd' name='Worksheet' table='[Worksheet$]' type='table'>
                <columns gridOrigin='A1:C111:no:A1:C111:0' header='yes' outcome='6'>
                  <column datatype='string' name='country' ordinal='0' />
                  <column datatype='integer' name='annual_income' ordinal='1' />
                  <column datatype='integer' name='corruption_index' ordinal='2' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Country-data' inline='true' name='federated.0t2t7u41dnhfqo1fs3viv0l37q26' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Country-data' name='textscan.05631ks1fpmca61fji56f1xqxmhb'>
            <connection class='textscan' directory='C:/Users/Admin/Downloads' filename='Country-data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.05631ks1fpmca61fji56f1xqxmhb' name='Country-data.csv' table='[Country-data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='real' name='child_mort' ordinal='1' />
            <column datatype='real' name='exports' ordinal='2' />
            <column datatype='real' name='health' ordinal='3' />
            <column datatype='real' name='imports' ordinal='4' />
            <column datatype='integer' name='income' ordinal='5' />
            <column datatype='real' name='inflation' ordinal='6' />
            <column datatype='real' name='life_expec' ordinal='7' />
            <column datatype='real' name='total_fer' ordinal='8' />
            <column datatype='integer' name='gdpp' ordinal='9' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.05631ks1fpmca61fji56f1xqxmhb' name='Country-data.csv' table='[Country-data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='real' name='child_mort' ordinal='1' />
            <column datatype='real' name='exports' ordinal='2' />
            <column datatype='real' name='health' ordinal='3' />
            <column datatype='real' name='imports' ordinal='4' />
            <column datatype='integer' name='income' ordinal='5' />
            <column datatype='real' name='inflation' ordinal='6' />
            <column datatype='real' name='life_expec' ordinal='7' />
            <column datatype='real' name='total_fer' ordinal='8' />
            <column datatype='integer' name='gdpp' ordinal='9' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;₹&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>child_mort</remote-name>
            <remote-type>5</remote-type>
            <local-name>[child_mort]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>child_mort</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>exports</remote-name>
            <remote-type>5</remote-type>
            <local-name>[exports]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>exports</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>health</remote-name>
            <remote-type>5</remote-type>
            <local-name>[health]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>health</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>imports</remote-name>
            <remote-type>5</remote-type>
            <local-name>[imports]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>imports</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[income]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>income</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>inflation</remote-name>
            <remote-type>5</remote-type>
            <local-name>[inflation]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>inflation</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>life_expec</remote-name>
            <remote-type>5</remote-type>
            <local-name>[life_expec]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>life_expec</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_fer</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_fer]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>total_fer</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gdpp</remote-name>
            <remote-type>20</remote-type>
            <local-name>[gdpp]</local-name>
            <parent-name>[Country-data.csv]</parent-name>
            <remote-alias>gdpp</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='ViewData' datatype='real' name='[Calculation_1377538550377811974]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 5]&#13;&#10;WHEN &apos;Exports&apos; then&#13;&#10;SUM([exports])&#13;&#10;WHEN &apos;Child Mort&apos; THEN&#13;&#10;SUM([child_mort])&#13;&#10;WHEN &apos;Gdpp&apos; THEN&#13;&#10;SUM([gdpp])&#13;&#10;WHEN &apos;Health&apos; THEN&#13;&#10;SUM([health])&#13;&#10;WHEN &apos;Import&apos; THEN&#13;&#10;SUM([imports])&#13;&#10;WHEN &apos;Income&apos; THEN&#13;&#10;SUM([income])&#13;&#10;END' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='Country-data.csv' datatype='table' name='[__tableau_internal_object_id__].[Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B]' role='measure' type='quantitative' />
      <column caption='Child Mort' datatype='real' name='[child_mort]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Exports' datatype='real' name='[exports]' role='measure' type='quantitative' />
      <column caption='Gdpp' datatype='integer' name='[gdpp]' role='measure' type='quantitative' />
      <column caption='Health' datatype='real' name='[health]' role='measure' type='quantitative' />
      <column caption='Imports' datatype='real' name='[imports]' role='measure' type='quantitative' />
      <column caption='Income' datatype='integer' name='[income]' role='measure' type='quantitative' />
      <column caption='Inflation' datatype='real' name='[inflation]' role='measure' type='quantitative' />
      <column caption='Life Expec' datatype='real' name='[life_expec]' role='measure' type='quantitative' />
      <column caption='Total Fer' datatype='real' name='[total_fer]' role='measure' type='quantitative' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lao&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Macedonia, FYR&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Congo, Rep.&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Micronesia, Fed. Sts.&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Congo, Dem. Rep.&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Select Options' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;Child Mort&quot;'>
          <calculation class='tableau' formula='&quot;Child Mort&quot;' />
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Country-data.csv' id='Country-data.csv_6022975D6EFE4202BB0BB84F6B38360B'>
            <properties context=''>
              <relation connection='textscan.05631ks1fpmca61fji56f1xqxmhb' name='Country-data.csv' table='[Country-data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
                  <column datatype='string' name='country' ordinal='0' />
                  <column datatype='real' name='child_mort' ordinal='1' />
                  <column datatype='real' name='exports' ordinal='2' />
                  <column datatype='real' name='health' ordinal='3' />
                  <column datatype='real' name='imports' ordinal='4' />
                  <column datatype='integer' name='income' ordinal='5' />
                  <column datatype='real' name='inflation' ordinal='6' />
                  <column datatype='real' name='life_expec' ordinal='7' />
                  <column datatype='real' name='total_fer' ordinal='8' />
                  <column datatype='integer' name='gdpp' ordinal='9' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1_521A010363574FE1B599271EC0FF709C]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Cost_Bar' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action2_35BE135ED96147AC8A8247F94F9C19FB]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Crpt_Bar' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action3_7FE6B9F1491B4A3BA0F23A1A0375DB42]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='CostOfLiving' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 4 (generated)' name='[Action4_BD885F6848C34D26B3D0A29639C4C349]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Corruption' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Hyperlink1' name='[Action5_C9561CE8225743C0B9FAE0F4611977BF]'>
      <activation type='on-select' />
      <source dashboard='Dashboard with Link' type='sheet' />
      <link caption='' expression='https://en.wikipedia.org/wiki/&lt;[country]&gt;'>
        <url-action-type>specific-zone</url-action-type>
        <url-action-target>15</url-action-target>
      </link>
    </action>
    <action caption='Hyperlink2' name='[Action8_841B5015B3B541B3B31E67AAD7CBDBC7]'>
      <activation type='on-select' />
      <source dashboard='Dashboard with Link' type='sheet' />
      <link caption='' expression='https://en.wikipedia.org/wiki/&lt;[country]&gt;'>
        <url-action-type>specific-zone</url-action-type>
        <url-action-target>15</url-action-target>
      </link>
    </action>
    <datasources>
      <datasource caption='Cost_of_Living' name='federated.0e5llo703nduuo1gz22r21wql9kl' />
    </datasources>
    <datasource-dependencies datasource='federated.0e5llo703nduuo1gz22r21wql9kl'>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
    </datasource-dependencies>
  </actions>
  <worksheets>
    <worksheet name='Corruption'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Country with Corruption index&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Corruption' name='federated.0drvtjy1hq1dfe17q0te21oux79c' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
              <calculation class='tableau' formula='9000' />
              <aliases>
                <alias key='500' value='500' />
                <alias key='1000' value='1,000' />
                <alias key='3000' value='3,000' />
                <alias key='6000' value='6,000' />
                <alias key='9000' value='9,000' />
                <alias key='10000' value='All' />
              </aliases>
            </column>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='3'>
              <calculation class='tableau' formula='3' />
              <range max='110' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0drvtjy1hq1dfe17q0te21oux79c'>
            <column caption='SalaryCal2' datatype='boolean' name='[Calculation_1302384731176534017]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]*12&gt;=[annual_income]' />
            </column>
            <column caption='Annual Income' datatype='integer' name='[annual_income]' role='measure' type='quantitative' />
            <column caption='Corruption Index' datatype='integer' name='[corruption_index]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Calculation_1302384731176534017]' derivation='None' name='[none:Calculation_1302384731176534017:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[corruption_index]' derivation='Sum' name='[sum:corruption_index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action1_521A010363574FE1B599271EC0FF709C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]'>
            <groupfilter function='member' level='[none:Calculation_1302384731176534017:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([annual_income])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[Action (Country)]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:corruption_index:qk]' value='' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='false' />
            <format attr='break-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='false' />
            <format attr='omit-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Latitude (generated)]' value='false' />
            <format attr='break-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Latitude (generated)]' value='false' />
            <format attr='show-null-value-warning' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Latitude (generated)]' value='false' />
            <format attr='omit-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Longitude (generated)]' value='false' />
            <format attr='break-on-special' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Longitude (generated)]' value='false' />
            <format attr='show-null-value-warning' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Longitude (generated)]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' />
              <text column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:corruption_index:qk]' />
              <geometry column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='6' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0drvtjy1hq1dfe17q0te21oux79c].[Latitude (generated)]</rows>
        <cols>[federated.0drvtjy1hq1dfe17q0te21oux79c].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{2988AC81-8A52-4832-8457-6F7DFFC7CF1E}' />
    </worksheet>
    <worksheet name='CostOfLiving'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Salary with purchasing index&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_Living' name='federated.0e5llo703nduuo1gz22r21wql9kl' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
              <calculation class='tableau' formula='9000' />
              <aliases>
                <alias key='500' value='500' />
                <alias key='1000' value='1,000' />
                <alias key='3000' value='3,000' />
                <alias key='6000' value='6,000' />
                <alias key='9000' value='9,000' />
                <alias key='10000' value='All' />
              </aliases>
            </column>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='3'>
              <calculation class='tableau' formula='3' />
              <range max='110' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0e5llo703nduuo1gz22r21wql9kl'>
            <column caption='SalaryCal' datatype='boolean' name='[Calculation_1302384731173437440]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] &gt;= [monthly_income]' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Monthly Income' datatype='integer' name='[monthly_income]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1302384731173437440]' derivation='None' name='[none:Calculation_1302384731173437440:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[monthly_income]' derivation='Sum' name='[pcto:sum:monthly_income:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column caption='Purchasing Power Index' datatype='real' name='[purchasing_power_index]' role='measure' type='quantitative' />
            <column-instance column='[purchasing_power_index]' derivation='Sum' name='[sum:purchasing_power_index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action1_521A010363574FE1B599271EC0FF709C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]'>
            <groupfilter function='member' level='[none:Calculation_1302384731173437440:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([monthly_income])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:country:nk]' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:country:nk]' member='&quot;Bermuda&quot;' />
                    <groupfilter function='member' level='[none:country:nk]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]</column>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[Action (Country)]</column>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:purchasing_power_index:qk]' />
              <text column='[federated.0e5llo703nduuo1gz22r21wql9kl].[pcto:sum:monthly_income:qk:1]' />
              <lod column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' />
              <geometry column='[federated.0e5llo703nduuo1gz22r21wql9kl].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='6' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0e5llo703nduuo1gz22r21wql9kl].[Latitude (generated)]</rows>
        <cols>[federated.0e5llo703nduuo1gz22r21wql9kl].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{CFBA5A23-8266-4942-8273-FD956965A166}' />
    </worksheet>
    <worksheet name='Cost_Bar'>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_Living' name='federated.0e5llo703nduuo1gz22r21wql9kl' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
              <calculation class='tableau' formula='9000' />
              <aliases>
                <alias key='500' value='500' />
                <alias key='1000' value='1,000' />
                <alias key='3000' value='3,000' />
                <alias key='6000' value='6,000' />
                <alias key='9000' value='9,000' />
                <alias key='10000' value='All' />
              </aliases>
            </column>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='3'>
              <calculation class='tableau' formula='3' />
              <range max='110' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0e5llo703nduuo1gz22r21wql9kl'>
            <column caption='SalaryCal' datatype='boolean' name='[Calculation_1302384731173437440]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1] &gt;= [monthly_income]' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Monthly Income' datatype='integer' name='[monthly_income]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1302384731173437440]' derivation='None' name='[none:Calculation_1302384731173437440:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column caption='Purchasing Power Index' datatype='real' name='[purchasing_power_index]' role='measure' type='quantitative' />
            <column-instance column='[monthly_income]' derivation='Sum' name='[sum:monthly_income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[purchasing_power_index]' derivation='Sum' name='[sum:purchasing_power_index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action2_35BE135ED96147AC8A8247F94F9C19FB]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]'>
            <groupfilter function='member' level='[none:Calculation_1302384731173437440:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([monthly_income])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:country:nk]' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:country:nk]' member='&quot;Bermuda&quot;' />
                    <groupfilter function='member' level='[none:country:nk]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]</column>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[Action (Country)]</column>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' value='114' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' value='7' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' />
              <tooltip column='[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:monthly_income:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='548' />
                <format attr='maxheight' value='548' />
                <format attr='minwidth' value='2040' />
                <format attr='maxwidth' value='2040' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:purchasing_power_index:qk]</rows>
        <cols>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</cols>
      </table>
      <simple-id uuid='{EE84FF5A-FC3D-42A7-8F50-1218E3D13247}' />
    </worksheet>
    <worksheet name='Crpt_Bar'>
      <layout-options>
        <title>
          <formatted-text />
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Corruption' name='federated.0drvtjy1hq1dfe17q0te21oux79c' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
              <calculation class='tableau' formula='9000' />
              <aliases>
                <alias key='500' value='500' />
                <alias key='1000' value='1,000' />
                <alias key='3000' value='3,000' />
                <alias key='6000' value='6,000' />
                <alias key='9000' value='9,000' />
                <alias key='10000' value='All' />
              </aliases>
            </column>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='3'>
              <calculation class='tableau' formula='3' />
              <range max='110' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0drvtjy1hq1dfe17q0te21oux79c'>
            <column caption='SalaryCal2' datatype='boolean' name='[Calculation_1302384731176534017]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]*12&gt;=[annual_income]' />
            </column>
            <column caption='Annual Income' datatype='integer' name='[annual_income]' role='measure' type='quantitative' />
            <column caption='Corruption Index' datatype='integer' name='[corruption_index]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Calculation_1302384731176534017]' derivation='None' name='[none:Calculation_1302384731176534017:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[annual_income]' derivation='Sum' name='[sum:annual_income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[corruption_index]' derivation='Sum' name='[sum:corruption_index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action1_521A010363574FE1B599271EC0FF709C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]'>
            <groupfilter function='member' level='[none:Calculation_1302384731176534017:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([annual_income])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[Action (Country)]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='7' />
            <format attr='display' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' />
              <text column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='7' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:annual_income:qk]</rows>
        <cols>[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:corruption_index:qk]</cols>
      </table>
      <simple-id uuid='{EA566D77-01B1-45DA-8130-D6C3674E5E67}' />
    </worksheet>
    <worksheet name='Sheet 5'>
      <table>
        <view>
          <datasources>
            <datasource caption='Cost_of_Living' name='federated.0e5llo703nduuo1gz22r21wql9kl' />
            <datasource name='Parameters' />
            <datasource caption='Corruption' name='federated.0drvtjy1hq1dfe17q0te21oux79c' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Select range' datatype='integer' name='[Parameter 4]' param-domain-type='any' role='measure' type='quantitative' value='15'>
              <calculation class='tableau' formula='15' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0drvtjy1hq1dfe17q0te21oux79c'>
            <column caption='Index' datatype='integer' name='[Calculation_1377538550309584896]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='INDEX()'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='First 10' datatype='boolean' name='[Calculation_1377538550310002689]' role='measure' type='nominal'>
              <calculation class='tableau' formula='[Calculation_1377538550309584896]&lt;=[Parameters].[Parameter 4]'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Last' datatype='integer' name='[Calculation_1377538550311116802]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='LAST()'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='First &amp; Last 10' datatype='boolean' name='[Calculation_1377538550312067076]' role='measure' type='nominal'>
              <calculation class='tableau' formula='[Calculation_1377538550309584896]&lt;=[Parameters].[Parameter 4] or [Calculation_1377538550311116802]&lt;=[Parameters].[Parameter 4]-1'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Annual Income' datatype='integer' name='[annual_income]' role='measure' type='quantitative' />
            <column-instance column='[annual_income]' derivation='Sum' name='[sum:annual_income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1377538550309584896]' derivation='User' name='[usr:Calculation_1377538550309584896:ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_1377538550310002689]' derivation='User' name='[usr:Calculation_1377538550310002689:nk:1]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Calculation_1377538550309584896]' ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_1377538550311116802]' derivation='User' name='[usr:Calculation_1377538550311116802:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_1377538550312067076]' derivation='User' name='[usr:Calculation_1377538550312067076:nk:1]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Calculation_1377538550309584896]' ordering-type='Columns' />
              <table-calc field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[Calculation_1377538550311116802]' ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0e5llo703nduuo1gz22r21wql9kl'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Monthly Income' datatype='integer' name='[monthly_income]' role='measure' type='quantitative' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[monthly_income]' derivation='Sum' name='[sum:monthly_income:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550312067076:nk:1]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[usr:Calculation_1377538550312067076:nk:1]' />
              <groupfilter function='member' level='[usr:Calculation_1377538550312067076:nk:1]' member='false' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:monthly_income:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:annual_income:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:monthly_income:qk]&quot;</bucket>
              <bucket>&quot;[federated.0drvtjy1hq1dfe17q0te21oux79c].[sum:annual_income:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0e5llo703nduuo1gz22r21wql9kl].[sum:monthly_income:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]</column>
            <column>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550312067076:nk:1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]' value='163' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550311116802:ok:1]' value='true' />
            <format attr='display' field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550309584896:ok]' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550310002689:nk:1]' />
              <text column='[federated.0e5llo703nduuo1gz22r21wql9kl].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550309584896:ok] / ([federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550311116802:ok:1] / [federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]))</rows>
        <cols>[federated.0e5llo703nduuo1gz22r21wql9kl].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{F1332797-EA61-4C34-BFA3-D6027723798E}' />
    </worksheet>
    <worksheet name='Sheet 6'>
      <table>
        <view>
          <datasources>
            <datasource caption='Country-data' name='federated.0t2t7u41dnhfqo1fs3viv0l37q26' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='3'>
              <calculation class='tableau' formula='3' />
              <range max='110' min='1' />
            </column>
            <column caption='Select Options' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;Child Mort&quot;'>
              <calculation class='tableau' formula='&quot;Child Mort&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0t2t7u41dnhfqo1fs3viv0l37q26'>
            <column caption='ViewData' datatype='real' name='[Calculation_1377538550377811974]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 5]&#13;&#10;WHEN &apos;Exports&apos; then&#13;&#10;SUM([exports])&#13;&#10;WHEN &apos;Child Mort&apos; THEN&#13;&#10;SUM([child_mort])&#13;&#10;WHEN &apos;Gdpp&apos; THEN&#13;&#10;SUM([gdpp])&#13;&#10;WHEN &apos;Health&apos; THEN&#13;&#10;SUM([health])&#13;&#10;WHEN &apos;Import&apos; THEN&#13;&#10;SUM([imports])&#13;&#10;WHEN &apos;Income&apos; THEN&#13;&#10;SUM([income])&#13;&#10;END' />
            </column>
            <column caption='Child Mort' datatype='real' name='[child_mort]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Exports' datatype='real' name='[exports]' role='measure' type='quantitative' />
            <column caption='Gdpp' datatype='integer' name='[gdpp]' role='measure' type='quantitative' />
            <column caption='Health' datatype='real' name='[health]' role='measure' type='quantitative' />
            <column caption='Imports' datatype='real' name='[imports]' role='measure' type='quantitative' />
            <column caption='Income' datatype='integer' name='[income]' role='measure' type='quantitative' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1377538550377811974]' derivation='User' name='[usr:Calculation_1377538550377811974:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]'>
            <groupfilter count='[Parameters].[Parameter 3]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='[Calculation_1377538550377811974]' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[Longitude (generated)]' field-type='quantitative' max='32870137.61064329' min='-15049548.848455241' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[Latitude (generated)]' field-type='quantitative' max='16763836.953323888' min='-11588642.868732663' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]' />
              <lod column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[usr:Calculation_1377538550377811974:qk]' />
              <text column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[usr:Calculation_1377538550377811974:qk]' />
              <geometry column='[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='7' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[Latitude (generated)]</rows>
        <cols>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{83D98175-CE59-41E0-9A97-D38673E6D743}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#75a1c7' fontname='Tableau Semibold'>Cost of Living</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='1000' maxwidth='1800' minheight='1000' minwidth='1800' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
          <calculation class='tableau' formula='9000' />
          <aliases>
            <alias key='500' value='500' />
            <alias key='1000' value='1,000' />
            <alias key='3000' value='3,000' />
            <alias key='6000' value='6,000' />
            <alias key='9000' value='9,000' />
            <alias key='10000' value='All' />
          </aliases>
          <members>
            <member alias='9,000' value='9000' />
            <member alias='6,000' value='6000' />
            <member alias='3,000' value='3000' />
            <member alias='1,000' value='1000' />
            <member alias='500' value='500' />
            <member alias='All' value='10000' />
          </members>
        </column>
        <column caption='Top N ' datatype='integer' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='3'>
          <calculation class='tableau' formula='3' />
          <range max='110' min='1' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98400' id='16' param='horz' type-v2='layout-flow' w='99112' x='444' y='800'>
            <zone h='98400' id='5' param='vert' type-v2='layout-flow' w='99112' x='444' y='800'>
              <zone h='4900' id='7' type-v2='title' w='99112' x='444' y='800'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='51750' id='8' name='CostOfLiving' w='45200' x='500' y='10125'>
          <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
        </zone>
        <zone h='51750' id='12' name='Corruption' w='51600' x='46500' y='10000'>
          <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
        </zone>
        <zone h='7000' id='11' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='16000' x='82700' y='1250'>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='4' />
          </zone-style>
        </zone>
        <zone h='37375' id='13' name='Cost_Bar' show-title='false' w='45100' x='400' y='62000'>
          <layout-cache minheight='330' type-h='scalable' type-w='cell' />
        </zone>
        <zone h='37300' id='14' name='Crpt_Bar' show-title='false' w='51333' x='46611' y='62100'>
          <layout-cache cell-count-w='106' minheight='330' non-cell-size-w='68' type-h='scalable' type-w='cell' />
        </zone>
        <zone h='7100' id='41' mode='slider' param='[Parameters].[Parameter 3]' type-v2='paramctrl' w='8889' x='73444' y='1700' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run bold='true' fontcolor='#75a1c7' fontname='Tableau Semibold'>Cost of Living</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1400' minheight='1400' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='49' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98400' id='48' param='vert' type-v2='layout-flow' w='99112' x='444' y='800'>
                <zone h='4900' id='7' type-v2='title' w='99112' x='444' y='800'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7000' id='11' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='16000' x='82700' y='1250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7100' id='41' mode='slider' param='[Parameters].[Parameter 3]' type-v2='paramctrl' w='8889' x='73444' y='1700'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='51750' id='12' is-fixed='true' name='Corruption' w='51600' x='46500' y='10000'>
                  <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='51750' id='8' is-fixed='true' name='CostOfLiving' w='45200' x='500' y='10125'>
                  <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='37375' id='13' is-fixed='true' name='Cost_Bar' show-title='false' w='45100' x='400' y='62000'>
                  <layout-cache minheight='330' type-h='scalable' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='37300' id='14' is-fixed='true' name='Crpt_Bar' show-title='false' w='51333' x='46611' y='62100'>
                  <layout-cache cell-count-w='106' minheight='330' non-cell-size-w='68' type-h='scalable' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{F167DD9D-CDB6-4AD2-B3B5-04563D805EB0}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard with Link'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#75a1c7' fontname='Tableau Semibold'>Cost of Living</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='1000' maxwidth='1800' minheight='1000' minwidth='1800' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column alias='9,000' caption='Monthly Salary range' datatype='integer' datatype-customized='true' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='9000'>
          <calculation class='tableau' formula='9000' />
          <aliases>
            <alias key='500' value='500' />
            <alias key='1000' value='1,000' />
            <alias key='3000' value='3,000' />
            <alias key='6000' value='6,000' />
            <alias key='9000' value='9,000' />
            <alias key='10000' value='All' />
          </aliases>
          <members>
            <member alias='9,000' value='9000' />
            <member alias='6,000' value='6000' />
            <member alias='3,000' value='3000' />
            <member alias='1,000' value='1000' />
            <member alias='500' value='500' />
            <member alias='All' value='10000' />
          </members>
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98400' id='14' param='horz' type-v2='layout-flow' w='99112' x='444' y='800'>
            <zone h='98400' id='5' param='vert' type-v2='layout-flow' w='99112' x='444' y='800'>
              <zone h='4900' id='7' type-v2='title' w='99112' x='444' y='800'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='39000' id='8' name='CostOfLiving' w='47900' x='500' y='8375' />
        <zone h='7000' id='11' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='16000' x='83100' y='875'>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='4' />
          </zone-style>
        </zone>
        <zone h='38875' id='12' name='Corruption' w='47600' x='51400' y='8250'>
          <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
        </zone>
        <zone forceUpdate='' h='51000' id='15' param='https://en.wikipedia.org/wiki/Russia' type-v2='web' w='98900' x='300' y='48000' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run bold='true' fontcolor='#75a1c7' fontname='Tableau Semibold'>Cost of Living</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1000' minheight='1000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='32' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98400' id='31' param='vert' type-v2='layout-flow' w='99112' x='444' y='800'>
                <zone h='4900' id='7' type-v2='title' w='99112' x='444' y='800'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7000' id='11' mode='compact' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='16000' x='83100' y='875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='38875' id='12' is-fixed='true' name='Corruption' w='47600' x='51400' y='8250'>
                  <layout-cache minheight='251' minwidth='202' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='39000' id='8' is-fixed='true' name='CostOfLiving' w='47900' x='500' y='8375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' forceUpdate='' h='51000' id='15' is-fixed='true' param='https://en.wikipedia.org/wiki/Russia' type-v2='web' w='98900' x='300' y='48000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{94D2D7B1-0626-477A-BB54-7BB47F7D2941}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='89'>
    <window class='worksheet' name='CostOfLiving'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:monthly_income:qk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[pcto:sum:monthly_income:qk:2]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{DDAA6DB2-B95E-4601-ABAD-7BF22AA9BF00}' />
    </window>
    <window class='worksheet' name='Corruption'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_569705366858178561:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C99553A4-920D-4AF1-A180-A79865D7BB01}' />
    </window>
    <window class='worksheet' name='Cost_Bar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:Calculation_1302384731173437440:nk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:monthly_income:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{307053C4-4ED1-4075-9C47-9B543382E7A3}' />
    </window>
    <window class='worksheet' name='Crpt_Bar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:Calculation_1302384731176534017:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550312067076:nk:3]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{62D92947-2BA0-43C9-89C5-C281F0D50392}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Corruption'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='CostOfLiving'>
          <zoom type='entire-view' />
          <default-map-tool-selection tool='4' />
        </viewpoint>
        <viewpoint name='Cost_Bar'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Crpt_Bar'>
          <zoom type='entire-view' />
          <highlight field='[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{5EDFFD5E-1EEB-4554-9323-D53E372CE20C}' />
    </window>
    <window class='dashboard' name='Dashboard with Link'>
      <viewpoints>
        <viewpoint name='Corruption'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='CostOfLiving'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='8' />
      <simple-id uuid='{3ED0A8FC-E79A-4A0D-BFD2-78B99EEF3667}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
            <card pane-specification-id='0' param='[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550310002689:nk:1]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550309584896:ok]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550310002689:nk:1]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550311116802:ok:1]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550311202819:nk]</field>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[usr:Calculation_1377538550312067076:nk:1]</field>
            <field>[federated.0e5llo703nduuo1gz22r21wql9kl].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C9870FB3-256A-4BA0-8B5B-A87469D3BF4E}' />
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 5]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0drvtjy1hq1dfe17q0te21oux79c].[none:country:nk]</field>
            <field>[federated.0t2t7u41dnhfqo1fs3viv0l37q26].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9ADC0F89-38E6-474D-9761-5DB22DDB2077}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Corruption' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CostOfLiving' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Cost_Bar' width='192'>
      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
      wtX+DzQ+bjP93+oMAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Crpt_Bar' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      XxD+P3sKcaXP7DbpAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Dashboard with Link' width='192'>
      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
      TUmSVmSsyM4DwINjngq0RKi7MHkkxsbGuIFJnRRo1QIaV03yJg0ODq7ZqTCWZWFycpJHbpPJ
      JF8VyeUpNptyqzJkJJNxTOd9KYrSMFlrtVrDxCcoyiweiC2qVfReOlOsq6trRVRJcWEqFoue
      AKwEuq6jUqnwhw3c0p9JZxYnBUVNyQCkZLzVHn/K96e6XPp88f4cx+GBJ6qoo6IXKj5pFkEW
      qdVqDYsBQQXxzSY2ed5isRhSqdSKjw0/EHFFr9qhzM7OQlVVfsAcbemUmtvdXT+2iSaOZVk8
      89I0TX46YyqValiJbzeU9kElgolEon4e2M0mV6R+EGJ1FR0yR9B3Fg+tFjvDaZrGDV6xh2e5
      XObeHurgTP76aDSKUCh0WxYGOp/M2wFWgFKpxA03Sr7SdZ0nh1EKAR0oTXnqdK6A3+/nQaPu
      7u6GQ+DuRGzbbjjfjGqCqR7YfY6wCI0T7QbRaJQfFkjCRqqk3+9HV1fXbc0k9naAZUKpFLRq
      u40sUoWofR95PSjgRJ4RAFwQ7tRsUsLn86FWq/HCIkoHpy4Q80HFN+SJIvWQskEpbSIcDi+Y
      6LYSeAKwTKjrgbjSi+fkUr66YRhIJpP8fa10ZsqNWY2Hv1TIkKRWKGQDLGQLkHeM3MLU/sSN
      u+nV7cQTgAWYr5iH3H7UFZkOiyMDkvzOdDB2O5AA6LoOv99/R5wf7IZ0dIoit1tIRKoO2QZi
      SgXtJNQ1erXwBGAB2tE/yWNBAS7yhYudyRYD+d5N00S1WuWeIlIX1rq6jg7PmJmZ4UEuapk4
      H5RXRRFyWkAoOBiPxxt2ydXAE4Bl4DgOSqUSzywkRP1/OZAtQO5H4Fa531rvColEouE0l3Z2
      AooT0KSn+AKlRvT29q662nfPt0W5nZDO7175SBdeqBKqFa2KOIC6UORyuTn57asNeaw0TeMe
      nIXuh7JKgbk5PtQDdLXxBGAZkJtO1O+bnXi+WMQSzVZQaeBaEgqFsH79em7o065HhfJufD7f
      nMPFm+UXrSaeACwTsfESsLoPcq1tAeBW+xTateg8r2Zp0OQtI7evmPrgDqytFjwQRgaKh0cn
      wQXAw6MTUQBgcmIEinL3tfjz8FguClA/Z7e3b/1a34uHx6qz9laUh8ca4gmAR0fjCYBHR+MJ
      gEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fj
      CYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH
      4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBH
      R+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmA
      R0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJ
      gEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fjCYBHR+MJgEdH4wmAR0fj
      CYBHR+MJgEdH8/8B8f2DDeZuEKgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 5' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 6' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
